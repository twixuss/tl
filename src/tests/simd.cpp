#include <tl/simd.h>

using namespace tl;

void simd_test() {
	using f32x4 = Vector<f32, 4>;
	using u8x16 = Vector<u8, 16>;
	using s8x16 = Vector<s8, 16>;

	assert(all(f32x4{1,2,3,4} + f32x4{5,6,7,8} == f32x4{6,8,10,12}));
	assert(all(u8x16{1,2,3,4,5,6,7,8,127,128,129,130,131,132,133,134} > u8x16{0,1,2,3,4,5,6,7,126,127,128,129,130,131,132,133}));
	assert(all(u8x16{1,2,3,4,5,6,7,8,127,128,129,130,131,132,133,134} >= u8x16{1,2,2,3,4,5,6,7,127,128,128,129,130,131,132,133}));
	assert(all(u8x16{0,1,2,3,4,5,6,7,126,127,128,129,130,131,132,133} < u8x16{1,2,3,4,5,6,7,8,127,128,129,130,131,132,133,134}));
	assert(all(u8x16{0,1,2,3,4,5,6,7,126,127,128,129,130,131,132,133} <= u8x16{0,1,3,4,5,6,7,8,126,127,129,130,131,132,133,134}));

	assert(all(s8x16{-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7} > s8x16{-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6}));
	assert(all(s8x16{-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7} >= s8x16{-8,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,7}));
	assert(all(s8x16{-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6} < s8x16{-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7}));
	assert(all(s8x16{-8,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,7} <= s8x16{-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7}));

	auto eq = [] (auto a, auto b) {
		assert(all(a == b));
	};

	eq(u8x16{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16} % 
	   u8x16{3,3,3,3,3,3,3,3,3, 3, 3, 3, 3, 3, 3, 3},
	   u8x16{1,2,0,1,2,0,1,2,0, 1, 2, 0, 1, 2, 0, 1});

	eq(s8x16{-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8} % 
	   s8x16{ 3, 3, 3, 3, 3, 3, 3,3,3,3,3,3,3,3,3,3}, 
	   s8x16{-1,-0,-2,-1,-0,-2,-1,0,1,2,0,1,2,0,1,2});
}